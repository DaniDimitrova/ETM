var mapStyle = [
  {
      "featureType": "water",
      "elementType": "geometry",
      "stylers": [
          {
              "color": "#193341"
          }
      ]
  },
  {
      "featureType": "landscape",
      "elementType": "geometry",
      "stylers": [
          {
              "color": "#2c5a71"
          }
      ]
  },
  {
      "featureType": "road",
      "elementType": "geometry",
      "stylers": [
          {
              "color": "#29768a"
          },
          {
              "lightness": -37
          }
      ]
  },
  {
      "featureType": "poi",
      "elementType": "geometry",
      "stylers": [
          {
              "color": "#406d80"
          }
      ]
  },
  {
      "featureType": "transit",
      "elementType": "geometry",
      "stylers": [
          {
              "color": "#406d80"
          }
      ]
  },
  {
      "elementType": "labels.text.stroke",
      "stylers": [
          {
              "visibility": "on"
          },
          {
              "color": "#3e606f"
          },
          {
              "weight": 2
          },
          {
              "gamma": 0.84
          }
      ]
  },
  {
      "elementType": "labels.text.fill",
      "stylers": [
          {
              "color": "#ffffff"
          }
      ]
  },
  {
      "featureType": "administrative",
      "elementType": "geometry",
      "stylers": [
          {
              "weight": 0.6
          },
          {
              "color": "#1a3541"
          }
      ]
  },
  {
      "elementType": "labels.icon",
      "stylers": [
          {
              "visibility": "off"
          }
      ]
  },
  {
      "featureType": "poi.park",
      "elementType": "geometry",
      "stylers": [
          {
              "color": "#2c5a71"
          }
      ]
  }
]
var CustomMarkerBuilder,
  handler,
  extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
      }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
  hasProp = {}.hasOwnProperty;

CustomMarkerBuilder = (function (superClass) {
  extend(CustomMarkerBuilder, superClass);

  function CustomMarkerBuilder() {
    return CustomMarkerBuilder.__super__.constructor.apply(this, arguments);
  }

  // CustomMarkerBuilder.prototype.create_marker = function () {
  //   var options;
  //   options = _.extend(this.marker_options(), this.rich_marker_options());
  //   return this.serviceObject = new RichMarker(options);
  // };
  //
  // CustomMarkerBuilder.prototype.rich_marker_options = function () {
  //   var marker;
  //   marker = document.createElement("div");
  //   marker.setAttribute('class', 'custom_marker_content');
  //   marker.innerHTML = this.args.custom_marker;
  //   return {content: marker};
  // };

  CustomMarkerBuilder.prototype.create_infowindow = function () {
    var boxText;
    if (!_.isString(this.args.custom_infowindow)) {
      return null;
    }
    boxText = document.createElement("div");
    //boxText.setAttribute("class", 'custom_infowindow_content');
    boxText.style.cssText = "border: 1px solid black; margin-top: 0px; background: white; padding: 5px; padding-top: 0px; max-width: 300px;"
    boxText.innerHTML = this.args.custom_infowindow;
    return this.infowindow = new InfoBox(this.infobox(boxText));
  };

  CustomMarkerBuilder.prototype.infobox = function (boxText) {
    return {
      content: boxText,
      pixelOffset: new google.maps.Size(-150, 0),
    };
  };

  return CustomMarkerBuilder;

})(Gmaps.Google.Builders.Marker);



// --- generated by coffee-script 1.9.2
