var mouse = {
  x: 0,
  y: 0,
  startX: 0,
  startY: 0,
  drawing: 0
};
var saveURL = window.location.href;
saveURL = saveURL.substring(0, saveURL.length - 10);
saveURL = saveURL + "artworks/"

function storeCoordinates() {
  mouse.startX = mouse.x;
  mouse.startY = mouse.y;
}

function SortCoordinates(x1,x2,y1,y2){
  var coords = new Array(4);
  coords[0] = Math.min(x1,x2);
  coords[2] = Math.max(x1,x2);
  coords[1] = Math.min(y1,y2);
  coords[3] = Math.max(y1,y2);
  return coords;
}
function verifyCoords(coordinateArray, maxX, maxY){
  coordinateArray[0] = Math.max(coordinateArray[0], 0);
  coordinateArray[1] = Math.max(coordinateArray[1], 0);
  coordinateArray[2] = Math.min(coordinateArray[2], maxX);
  coordinateArray[3] = Math.min(coordinateArray[3], maxY);
  return coordinateArray;
}

function BuildArea(coords){
  return "<area alt='' title='' href= 'http://www.google.com' shape='rect' coords='"+ coords.join() + "' />";
}

// http://www.chestysoft.com/imagefile/javascript/get-coordinates.asp
function FindPosition(oElement)
{
  if(typeof( oElement.offsetParent ) != "undefined")
  {
    for(var posX = 0, posY = 0; oElement; oElement = oElement.offsetParent)
    {
      posX += oElement.offsetLeft;
      posY += oElement.offsetTop;
    }
      return [ posX, posY ];
    }
    else
    {
      return [ oElement.x, oElement.y ];
    }
}

function setMousePosition(e){
  var PosX = 0;
  var PosY = 0;
  var ImgPos;
  ImgPos = FindPosition(myImg);
  if (!e) var e = window.event;
  if (e.pageX || e.pageY)
  {
    PosX = e.pageX;
    PosY = e.pageY;
  }
  else if (e.clientX || e.clientY)
    {
      PosX = e.clientX + document.body.scrollLeft
        + document.documentElement.scrollLeft;
      PosY = e.clientY + document.body.scrollTop
        + document.documentElement.scrollTop;
    }
  PosX = PosX - ImgPos[0];
  PosY = PosY - ImgPos[1];
  mouse.x = PosX;
  mouse.y = PosY;
}

function drawTemp(){
  var sortedCoords = SortCoordinates(mouse.x, mouse.startX, mouse.y, mouse.startY);
  imgLocation = FindPosition(myImg);
  maxX = myImg.offsetWidth;
  maxY = myImg.offsetHeight;
  sortedCoords = verifyCoords(sortedCoords, maxX, maxY);
  var temp = new TempDiv(sortedCoords);
  temp.draw();
  return temp;
}

function drawGui(divElement){
  var gui = new dat.GUI();
  var leftControl = gui.add(divElement, 'leftCoordinate');
  leftControl.onChange(function(value){
    divElement.leftCoordinate = value;
    divElement.draw();
  });
  // leftControl.step(5);
  leftControl.name('Left Coordinate');

  var topControl = gui.add(divElement, 'topCoordinate');
  topControl.onChange(function(value){
    divElement.topCoordinate = value;
    divElement.draw();
  });
  // topControl.step(5);
  topControl.name('Top Coordinate');

  var widthControl = gui.add(divElement, 'width');
  widthControl.onChange(function(value){
    divElement.width = value;
    divElement.draw();
  });
  widthControl.name('Width');

  var heightControl = gui.add(divElement, 'height');
  heightControl.onChange(function(value){
    divElement.height = value;
    divElement.draw();
  });
  heightControl.name('Height');
  var artworkSelectControl = gui.add(divElement, 'artwork', buildArtworkList());
  artworkSelectControl.name('Artwork');
  var saveControl = gui.add(divElement, "save");
  saveControl.name('SAVE');
  var cancelControl = gui.add(divElement, 'cancel');
  cancelControl.name('Cancel');
}

var TempDiv = function(coords){
  this.leftCoordinate = coords[0];
  this.rightCoordinate = coords[2];
  this.topCoordinate = coords[1];
  this.bottomCoordinate = coords[3];
  this.width = this.rightCoordinate - this.leftCoordinate;
  this.height = this.bottomCoordinate - this.topCoordinate;
  this.artwork = -1;
  // $('#floor').prepend("<div style='width: 200px; height: 100px; border-style: dotted; border-width: medium;'> </div>");

  this.draw = function(){
      $('#scaffold').replaceWith("<div id='scaffold' style='position: absolute; left: " + this.leftCoordinate.toString() + "; top: " + this.topCoordinate.toString() + "; width: " + this.width.toString() + "; height: " + this.height.toString() + "; border-style: dotted; border-width: medium;' </div>");
  }
  this.save = function(){
    var newArea = BuildArea([this.leftCoordinate,this.topCoordinate,this.rightCoordinate,this.bottomCoordinate]);
    $('img').mapster('unbind');
    $('#floor').html(originalContent);
    $('#floor-map').append(newArea);
    originalContent = $('#floor').clone().html();
    initializeMapster();
    $('#mapster_wrap_0').append("<div id='scaffold' style='display: none;'</div>");
    // $(document).ready(onWindowResize);
    $('.dg.main.a').remove();
    console.log(saveURL + this.artwork);
    $.ajax({
      data: JSON.stringify({
        "left": this.leftCoordinate,
        "right": this.rightCoordinate,
        "top": this.topCoordinate,
        "bottom": this.bottomCoordinate
      }),
      type: "PUT",
      url: (saveURL + this.artwork),
      dataType: "json",
      contentType: "application/json",
      success: function(){
        console.log("SHOULD BE SAVED!!!");
      },
      error: function(a,b,c) {
        console.log("ERROR WITH AJAX:" + a + b + c);
      }

    });
  }
  this.cancel = function(){
    $('#scaffold').replaceWith("<div id='scaffold' style='display: none;'</div>");
    $('.dg.main.a').remove();

  }
}

function buildArtworkList(){
  none = {'NONE': -1};
  artworks = JSON.parse(gon.artworks);
  return $.extend({}, none, artworks);
}
